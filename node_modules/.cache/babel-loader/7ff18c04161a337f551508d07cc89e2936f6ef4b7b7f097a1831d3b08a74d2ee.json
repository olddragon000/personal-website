{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nexport default function useOnScreen(ref) {\n  _s();\n  const [isIntersecting, setIntersecting] = useState(false);\n  const observer = new IntersectionObserver(_ref => {\n    let [entry] = _ref;\n    return setIntersecting(entry.isIntersecting);\n  });\n  useEffect(() => {\n    observer.observe(ref.current);\n    // Remove the observer as soon as the component is unmounted\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n  return isIntersecting;\n}\n_s(useOnScreen, \"+TWZGT8mxcpNH+JS7IkSFv1hR0A=\");","map":{"version":3,"names":["useEffect","useState","useOnScreen","ref","isIntersecting","setIntersecting","observer","IntersectionObserver","entry","observe","current","disconnect"],"sources":["/Users/jialiangzhou/cs1300/portfolio/portfolio/src/components/useOnScreen.tsx"],"sourcesContent":["import {useEffect, useState} from \"react\";\n\nexport default function useOnScreen(ref:any) {\n\n    const [isIntersecting, setIntersecting] = useState(false)\n\n    const observer = new IntersectionObserver(\n        ([entry]) => setIntersecting(entry.isIntersecting)\n    )\n\n    useEffect(() => {\n        observer.observe(ref.current)\n        // Remove the observer as soon as the component is unmounted\n        return () => {\n            observer.disconnect()\n        }\n    }, [])\n\n    return isIntersecting\n}"],"mappings":";AAAA,SAAQA,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAEzC,eAAe,SAASC,WAAW,CAACC,GAAO,EAAE;EAAA;EAEzC,MAAM,CAACC,cAAc,EAAEC,eAAe,CAAC,GAAGJ,QAAQ,CAAC,KAAK,CAAC;EAEzD,MAAMK,QAAQ,GAAG,IAAIC,oBAAoB,CACrC;IAAA,IAAC,CAACC,KAAK,CAAC;IAAA,OAAKH,eAAe,CAACG,KAAK,CAACJ,cAAc,CAAC;EAAA,EACrD;EAEDJ,SAAS,CAAC,MAAM;IACZM,QAAQ,CAACG,OAAO,CAACN,GAAG,CAACO,OAAO,CAAC;IAC7B;IACA,OAAO,MAAM;MACTJ,QAAQ,CAACK,UAAU,EAAE;IACzB,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOP,cAAc;AACzB;AAAC,GAjBuBF,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}